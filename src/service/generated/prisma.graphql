# source: http://localhost:4466
# timestamp: Wed Oct 03 2018 13:20:00 GMT-0700 (Pacific Daylight Time)

type AggregateFoo {
  count: Int!
}

type AggregateSampleJson {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Foo implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  secretFoo: String
}

"""A connection to a list of items."""
type FooConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FooEdge]!
  aggregate: AggregateFoo!
}

input FooCreateInput {
  name: String
  secretFoo: String
}

"""An edge in a connection."""
type FooEdge {
  """The item at the end of the edge."""
  node: Foo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FooOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  secretFoo_ASC
  secretFoo_DESC
}

type FooPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  secretFoo: String
}

type FooSubscriptionPayload {
  mutation: MutationType!
  node: Foo
  updatedFields: [String!]
  previousValues: FooPreviousValues
}

input FooSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FooSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FooSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FooSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FooWhereInput
}

input FooUpdateInput {
  name: String
  secretFoo: String
}

input FooWhereInput {
  """Logical AND on all given filters."""
  AND: [FooWhereInput!]

  """Logical OR on all given filters."""
  OR: [FooWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FooWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  secretFoo: String

  """All values that are not equal to given value."""
  secretFoo_not: String

  """All values that are contained in given list."""
  secretFoo_in: [String!]

  """All values that are not contained in given list."""
  secretFoo_not_in: [String!]

  """All values less than the given value."""
  secretFoo_lt: String

  """All values less than or equal the given value."""
  secretFoo_lte: String

  """All values greater than the given value."""
  secretFoo_gt: String

  """All values greater than or equal the given value."""
  secretFoo_gte: String

  """All values containing the given string."""
  secretFoo_contains: String

  """All values not containing the given string."""
  secretFoo_not_contains: String

  """All values starting with the given string."""
  secretFoo_starts_with: String

  """All values not starting with the given string."""
  secretFoo_not_starts_with: String

  """All values ending with the given string."""
  secretFoo_ends_with: String

  """All values not ending with the given string."""
  secretFoo_not_ends_with: String
}

input FooWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createFoo(data: FooCreateInput!): Foo!
  createSampleJson(data: SampleJsonCreateInput!): SampleJson!
  updateFoo(data: FooUpdateInput!, where: FooWhereUniqueInput!): Foo
  updateSampleJson(data: SampleJsonUpdateInput!, where: SampleJsonWhereUniqueInput!): SampleJson
  deleteFoo(where: FooWhereUniqueInput!): Foo
  deleteSampleJson(where: SampleJsonWhereUniqueInput!): SampleJson
  upsertFoo(where: FooWhereUniqueInput!, create: FooCreateInput!, update: FooUpdateInput!): Foo!
  upsertSampleJson(where: SampleJsonWhereUniqueInput!, create: SampleJsonCreateInput!, update: SampleJsonUpdateInput!): SampleJson!
  updateManyFoos(data: FooUpdateInput!, where: FooWhereInput): BatchPayload!
  updateManySampleJsons(data: SampleJsonUpdateInput!, where: SampleJsonWhereInput): BatchPayload!
  deleteManyFoos(where: FooWhereInput): BatchPayload!
  deleteManySampleJsons(where: SampleJsonWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  foos(where: FooWhereInput, orderBy: FooOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Foo]!
  sampleJsons(where: SampleJsonWhereInput, orderBy: SampleJsonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SampleJson]!
  foo(where: FooWhereUniqueInput!): Foo
  sampleJson(where: SampleJsonWhereUniqueInput!): SampleJson
  foosConnection(where: FooWhereInput, orderBy: FooOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FooConnection!
  sampleJsonsConnection(where: SampleJsonWhereInput, orderBy: SampleJsonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SampleJsonConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SampleJson implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  json: Json
  jsons: [Json!]!
}

"""A connection to a list of items."""
type SampleJsonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SampleJsonEdge]!
  aggregate: AggregateSampleJson!
}

input SampleJsonCreateInput {
  json: Json
  jsons: SampleJsonCreatejsonsInput
}

input SampleJsonCreatejsonsInput {
  set: [Json!]
}

"""An edge in a connection."""
type SampleJsonEdge {
  """The item at the end of the edge."""
  node: SampleJson!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SampleJsonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  json_ASC
  json_DESC
}

type SampleJsonPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  json: Json
  jsons: [Json!]!
}

type SampleJsonSubscriptionPayload {
  mutation: MutationType!
  node: SampleJson
  updatedFields: [String!]
  previousValues: SampleJsonPreviousValues
}

input SampleJsonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SampleJsonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SampleJsonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SampleJsonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SampleJsonWhereInput
}

input SampleJsonUpdateInput {
  json: Json
  jsons: SampleJsonUpdatejsonsInput
}

input SampleJsonUpdatejsonsInput {
  set: [Json!]
}

input SampleJsonWhereInput {
  """Logical AND on all given filters."""
  AND: [SampleJsonWhereInput!]

  """Logical OR on all given filters."""
  OR: [SampleJsonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SampleJsonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SampleJsonWhereUniqueInput {
  id: ID
}

type Subscription {
  foo(where: FooSubscriptionWhereInput): FooSubscriptionPayload
  sampleJson(where: SampleJsonSubscriptionWhereInput): SampleJsonSubscriptionPayload
}
