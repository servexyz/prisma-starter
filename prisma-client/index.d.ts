// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  foo: (where?: FooWhereInput) => Promise<boolean>;
  sampleJson: (where?: SampleJsonWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  foo: (where: FooWhereUniqueInput) => Foo;
  foos: (
    args?: {
      where?: FooWhereInput;
      orderBy?: FooOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<FooNode>>;
  foosConnection: (
    args?: {
      where?: FooWhereInput;
      orderBy?: FooOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FooConnection;
  sampleJson: (where: SampleJsonWhereUniqueInput) => SampleJson;
  sampleJsons: (
    args?: {
      where?: SampleJsonWhereInput;
      orderBy?: SampleJsonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SampleJsonNode>>;
  sampleJsonsConnection: (
    args?: {
      where?: SampleJsonWhereInput;
      orderBy?: SampleJsonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SampleJsonConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFoo: (data: FooCreateInput) => Foo;
  updateFoo: (
    args: { data: FooUpdateInput; where: FooWhereUniqueInput }
  ) => Foo;
  updateManyFoos: (
    args: { data: FooUpdateInput; where?: FooWhereInput }
  ) => BatchPayload;
  upsertFoo: (
    args: {
      where: FooWhereUniqueInput;
      create: FooCreateInput;
      update: FooUpdateInput;
    }
  ) => Foo;
  deleteFoo: (where: FooWhereUniqueInput) => Foo;
  deleteManyFoos: (where?: FooWhereInput) => BatchPayload;
  createSampleJson: (data: SampleJsonCreateInput) => SampleJson;
  updateSampleJson: (
    args: { data: SampleJsonUpdateInput; where: SampleJsonWhereUniqueInput }
  ) => SampleJson;
  updateManySampleJsons: (
    args: { data: SampleJsonUpdateInput; where?: SampleJsonWhereInput }
  ) => BatchPayload;
  upsertSampleJson: (
    args: {
      where: SampleJsonWhereUniqueInput;
      create: SampleJsonCreateInput;
      update: SampleJsonUpdateInput;
    }
  ) => SampleJson;
  deleteSampleJson: (where: SampleJsonWhereUniqueInput) => SampleJson;
  deleteManySampleJsons: (where?: SampleJsonWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  foo: (
    where?: FooSubscriptionWhereInput
  ) => FooSubscriptionPayloadSubscription;
  sampleJson: (
    where?: SampleJsonSubscriptionWhereInput
  ) => SampleJsonSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FooOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "secretFoo_ASC"
  | "secretFoo_DESC";

export type SampleJsonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "json_ASC"
  | "json_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SampleJsonCreatejsonsInput {
  set?: Json[] | Json;
}

export interface SampleJsonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SampleJsonWhereInput[] | SampleJsonWhereInput;
  OR?: SampleJsonWhereInput[] | SampleJsonWhereInput;
  NOT?: SampleJsonWhereInput[] | SampleJsonWhereInput;
}

export interface FooUpdateInput {
  name?: String;
  secretFoo?: String;
}

export type FooWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FooWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  secretFoo?: String;
  secretFoo_not?: String;
  secretFoo_in?: String[] | String;
  secretFoo_not_in?: String[] | String;
  secretFoo_lt?: String;
  secretFoo_lte?: String;
  secretFoo_gt?: String;
  secretFoo_gte?: String;
  secretFoo_contains?: String;
  secretFoo_not_contains?: String;
  secretFoo_starts_with?: String;
  secretFoo_not_starts_with?: String;
  secretFoo_ends_with?: String;
  secretFoo_not_ends_with?: String;
  AND?: FooWhereInput[] | FooWhereInput;
  OR?: FooWhereInput[] | FooWhereInput;
  NOT?: FooWhereInput[] | FooWhereInput;
}

export interface FooSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FooWhereInput;
  AND?: FooSubscriptionWhereInput[] | FooSubscriptionWhereInput;
  OR?: FooSubscriptionWhereInput[] | FooSubscriptionWhereInput;
  NOT?: FooSubscriptionWhereInput[] | FooSubscriptionWhereInput;
}

export type SampleJsonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FooCreateInput {
  name?: String;
  secretFoo?: String;
}

export interface SampleJsonUpdatejsonsInput {
  set?: Json[] | Json;
}

export interface SampleJsonCreateInput {
  json?: Json;
  jsons?: SampleJsonCreatejsonsInput;
}

export interface SampleJsonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SampleJsonWhereInput;
  AND?: SampleJsonSubscriptionWhereInput[] | SampleJsonSubscriptionWhereInput;
  OR?: SampleJsonSubscriptionWhereInput[] | SampleJsonSubscriptionWhereInput;
  NOT?: SampleJsonSubscriptionWhereInput[] | SampleJsonSubscriptionWhereInput;
}

export interface SampleJsonUpdateInput {
  json?: Json;
  jsons?: SampleJsonUpdatejsonsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SampleJsonConnectionNode {}

export interface SampleJsonConnection
  extends Promise<SampleJsonConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SampleJsonEdgeNode>>>() => T;
  aggregate: <T = AggregateSampleJson>() => T;
}

export interface SampleJsonConnectionSubscription
  extends Promise<AsyncIterator<SampleJsonConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SampleJsonEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSampleJsonSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SampleJsonPreviousValuesNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  json?: Json;
  jsons: Json[];
}

export interface SampleJsonPreviousValues
  extends Promise<SampleJsonPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  json: () => Promise<Json>;
  jsons: () => Promise<Json[]>;
}

export interface SampleJsonPreviousValuesSubscription
  extends Promise<AsyncIterator<SampleJsonPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  json: () => Promise<AsyncIterator<Json>>;
  jsons: () => Promise<AsyncIterator<Json[]>>;
}

export interface FooConnectionNode {}

export interface FooConnection
  extends Promise<FooConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<FooEdgeNode>>>() => T;
  aggregate: <T = AggregateFoo>() => T;
}

export interface FooConnectionSubscription
  extends Promise<AsyncIterator<FooConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<FooEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateFooSubscription>() => T;
}

export interface SampleJsonEdgeNode {
  cursor: String;
}

export interface SampleJsonEdge
  extends Promise<SampleJsonEdgeNode>,
    Fragmentable {
  node: <T = SampleJson>() => T;
  cursor: () => Promise<String>;
}

export interface SampleJsonEdgeSubscription
  extends Promise<AsyncIterator<SampleJsonEdgeNode>>,
    Fragmentable {
  node: <T = SampleJsonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FooSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FooSubscriptionPayload
  extends Promise<FooSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Foo>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FooPreviousValues>() => T;
}

export interface FooSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FooSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FooSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FooPreviousValuesSubscription>() => T;
}

export interface AggregateFooNode {
  count: Int;
}

export interface AggregateFoo extends Promise<AggregateFooNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFooSubscription
  extends Promise<AsyncIterator<AggregateFooNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSampleJsonNode {
  count: Int;
}

export interface AggregateSampleJson
  extends Promise<AggregateSampleJsonNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSampleJsonSubscription
  extends Promise<AsyncIterator<AggregateSampleJsonNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FooPreviousValuesNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  secretFoo?: String;
}

export interface FooPreviousValues
  extends Promise<FooPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  secretFoo: () => Promise<String>;
}

export interface FooPreviousValuesSubscription
  extends Promise<AsyncIterator<FooPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  secretFoo: () => Promise<AsyncIterator<String>>;
}

export interface FooNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  secretFoo?: String;
}

export interface Foo extends Promise<FooNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  secretFoo: () => Promise<String>;
}

export interface FooSubscription
  extends Promise<AsyncIterator<FooNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  secretFoo: () => Promise<AsyncIterator<String>>;
}

export interface SampleJsonSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SampleJsonSubscriptionPayload
  extends Promise<SampleJsonSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SampleJson>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SampleJsonPreviousValues>() => T;
}

export interface SampleJsonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SampleJsonSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SampleJsonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SampleJsonPreviousValuesSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FooEdgeNode {
  cursor: String;
}

export interface FooEdge extends Promise<FooEdgeNode>, Fragmentable {
  node: <T = Foo>() => T;
  cursor: () => Promise<String>;
}

export interface FooEdgeSubscription
  extends Promise<AsyncIterator<FooEdgeNode>>,
    Fragmentable {
  node: <T = FooSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SampleJsonNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  json?: Json;
  jsons: Json[];
}

export interface SampleJson extends Promise<SampleJsonNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  json: () => Promise<Json>;
  jsons: () => Promise<Json[]>;
}

export interface SampleJsonSubscription
  extends Promise<AsyncIterator<SampleJsonNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  json: () => Promise<AsyncIterator<Json>>;
  jsons: () => Promise<AsyncIterator<Json[]>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Json = any;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
